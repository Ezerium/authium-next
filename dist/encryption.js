function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
import * as crypto from "crypto";
var ALGORITHM = "aes-256-cbc";
var SECRET_KEY = crypto.createHash("sha256").update(String(process.env.ENCRYPTION_KEY || "default_key")).digest();
export function encrypt(text) {
  var iv = crypto.randomBytes(16);
  var cipher = crypto.createCipheriv(ALGORITHM, SECRET_KEY, iv);
  var encrypted = Buffer.concat([cipher.update(text, "utf8"), cipher["final"]()]);
  return iv.toString("hex") + ":" + encrypted.toString("hex");
}
export function decrypt(text) {
  try {
    var _text$split = text.split(":"),
      _text$split2 = _slicedToArray(_text$split, 2),
      ivHex = _text$split2[0],
      encryptedHex = _text$split2[1];
    if (!ivHex || !encryptedHex) return null;
    var iv = Buffer.from(ivHex, "hex");
    var encrypted = Buffer.from(encryptedHex, "hex");
    var decipher = crypto.createDecipheriv(ALGORITHM, SECRET_KEY, iv);
    var decrypted = Buffer.concat([decipher.update(encrypted), decipher["final"]()]);
    return decrypted.toString("utf8");
  } catch (err) {
    console.error("Decryption failed:", err);
    return null; // Donâ€™t throw, return null so consumer can handle
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcnlwdG8iLCJBTEdPUklUSE0iLCJTRUNSRVRfS0VZIiwiY3JlYXRlSGFzaCIsInVwZGF0ZSIsIlN0cmluZyIsInByb2Nlc3MiLCJlbnYiLCJFTkNSWVBUSU9OX0tFWSIsImRpZ2VzdCIsImVuY3J5cHQiLCJ0ZXh0IiwiaXYiLCJyYW5kb21CeXRlcyIsImNpcGhlciIsImNyZWF0ZUNpcGhlcml2IiwiZW5jcnlwdGVkIiwiQnVmZmVyIiwiY29uY2F0IiwidG9TdHJpbmciLCJkZWNyeXB0IiwiX3RleHQkc3BsaXQiLCJzcGxpdCIsIl90ZXh0JHNwbGl0MiIsIl9zbGljZWRUb0FycmF5IiwiaXZIZXgiLCJlbmNyeXB0ZWRIZXgiLCJmcm9tIiwiZGVjaXBoZXIiLCJjcmVhdGVEZWNpcGhlcml2IiwiZGVjcnlwdGVkIiwiZXJyIiwiY29uc29sZSIsImVycm9yIl0sInNvdXJjZXMiOlsiLi4vbGliL2VuY3J5cHRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY3J5cHRvIGZyb20gXCJjcnlwdG9cIjtcclxuXHJcbmNvbnN0IEFMR09SSVRITSA9IFwiYWVzLTI1Ni1jYmNcIjtcclxuY29uc3QgU0VDUkVUX0tFWSA9IGNyeXB0by5jcmVhdGVIYXNoKFwic2hhMjU2XCIpLnVwZGF0ZShTdHJpbmcocHJvY2Vzcy5lbnYuRU5DUllQVElPTl9LRVkgfHwgXCJkZWZhdWx0X2tleVwiKSkuZGlnZXN0KCk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZW5jcnlwdCh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgaXYgPSBjcnlwdG8ucmFuZG9tQnl0ZXMoMTYpO1xyXG4gICAgY29uc3QgY2lwaGVyID0gY3J5cHRvLmNyZWF0ZUNpcGhlcml2KEFMR09SSVRITSwgU0VDUkVUX0tFWSwgaXYpO1xyXG4gICAgY29uc3QgZW5jcnlwdGVkID0gQnVmZmVyLmNvbmNhdChbY2lwaGVyLnVwZGF0ZSh0ZXh0LCBcInV0ZjhcIiksIGNpcGhlci5maW5hbCgpXSk7XHJcbiAgICByZXR1cm4gaXYudG9TdHJpbmcoXCJoZXhcIikgKyBcIjpcIiArIGVuY3J5cHRlZC50b1N0cmluZyhcImhleFwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlY3J5cHQodGV4dDogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IFtpdkhleCwgZW5jcnlwdGVkSGV4XSA9IHRleHQuc3BsaXQoXCI6XCIpO1xyXG4gICAgICAgIGlmICghaXZIZXggfHwgIWVuY3J5cHRlZEhleCkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgIGNvbnN0IGl2ID0gQnVmZmVyLmZyb20oaXZIZXgsIFwiaGV4XCIpO1xyXG4gICAgICAgIGNvbnN0IGVuY3J5cHRlZCA9IEJ1ZmZlci5mcm9tKGVuY3J5cHRlZEhleCwgXCJoZXhcIik7XHJcblxyXG4gICAgICAgIGNvbnN0IGRlY2lwaGVyID0gY3J5cHRvLmNyZWF0ZURlY2lwaGVyaXYoQUxHT1JJVEhNLCBTRUNSRVRfS0VZLCBpdik7XHJcbiAgICAgICAgY29uc3QgZGVjcnlwdGVkID0gQnVmZmVyLmNvbmNhdChbXHJcbiAgICAgICAgZGVjaXBoZXIudXBkYXRlKGVuY3J5cHRlZCksXHJcbiAgICAgICAgZGVjaXBoZXIuZmluYWwoKSxcclxuICAgICAgICBdKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGRlY3J5cHRlZC50b1N0cmluZyhcInV0ZjhcIik7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiRGVjcnlwdGlvbiBmYWlsZWQ6XCIsIGVycik7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7IC8vIERvbuKAmXQgdGhyb3csIHJldHVybiBudWxsIHNvIGNvbnN1bWVyIGNhbiBoYW5kbGVcclxuICAgIH1cclxufVxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sS0FBS0EsTUFBTSxNQUFNLFFBQVE7QUFFaEMsSUFBTUMsU0FBUyxHQUFHLGFBQWE7QUFDL0IsSUFBTUMsVUFBVSxHQUFHRixNQUFNLENBQUNHLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQ0MsTUFBTSxDQUFDQyxNQUFNLENBQUNDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxjQUFjLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQ0MsTUFBTSxDQUFDLENBQUM7QUFFbkgsT0FBTyxTQUFTQyxPQUFPQSxDQUFDQyxJQUFZLEVBQVU7RUFDMUMsSUFBTUMsRUFBRSxHQUFHWixNQUFNLENBQUNhLFdBQVcsQ0FBQyxFQUFFLENBQUM7RUFDakMsSUFBTUMsTUFBTSxHQUFHZCxNQUFNLENBQUNlLGNBQWMsQ0FBQ2QsU0FBUyxFQUFFQyxVQUFVLEVBQUVVLEVBQUUsQ0FBQztFQUMvRCxJQUFNSSxTQUFTLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLENBQUNKLE1BQU0sQ0FBQ1YsTUFBTSxDQUFDTyxJQUFJLEVBQUUsTUFBTSxDQUFDLEVBQUVHLE1BQU0sU0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzlFLE9BQU9GLEVBQUUsQ0FBQ08sUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBR0gsU0FBUyxDQUFDRyxRQUFRLENBQUMsS0FBSyxDQUFDO0FBQy9EO0FBRUEsT0FBTyxTQUFTQyxPQUFPQSxDQUFDVCxJQUFZLEVBQWlCO0VBQ2pELElBQUk7SUFDQSxJQUFBVSxXQUFBLEdBQThCVixJQUFJLENBQUNXLEtBQUssQ0FBQyxHQUFHLENBQUM7TUFBQUMsWUFBQSxHQUFBQyxjQUFBLENBQUFILFdBQUE7TUFBdENJLEtBQUssR0FBQUYsWUFBQTtNQUFFRyxZQUFZLEdBQUFILFlBQUE7SUFDMUIsSUFBSSxDQUFDRSxLQUFLLElBQUksQ0FBQ0MsWUFBWSxFQUFFLE9BQU8sSUFBSTtJQUV4QyxJQUFNZCxFQUFFLEdBQUdLLE1BQU0sQ0FBQ1UsSUFBSSxDQUFDRixLQUFLLEVBQUUsS0FBSyxDQUFDO0lBQ3BDLElBQU1ULFNBQVMsR0FBR0MsTUFBTSxDQUFDVSxJQUFJLENBQUNELFlBQVksRUFBRSxLQUFLLENBQUM7SUFFbEQsSUFBTUUsUUFBUSxHQUFHNUIsTUFBTSxDQUFDNkIsZ0JBQWdCLENBQUM1QixTQUFTLEVBQUVDLFVBQVUsRUFBRVUsRUFBRSxDQUFDO0lBQ25FLElBQU1rQixTQUFTLEdBQUdiLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLENBQ2hDVSxRQUFRLENBQUN4QixNQUFNLENBQUNZLFNBQVMsQ0FBQyxFQUMxQlksUUFBUSxTQUFNLENBQUMsQ0FBQyxDQUNmLENBQUM7SUFFRixPQUFPRSxTQUFTLENBQUNYLFFBQVEsQ0FBQyxNQUFNLENBQUM7RUFDckMsQ0FBQyxDQUFDLE9BQU9ZLEdBQUcsRUFBRTtJQUNWQyxPQUFPLENBQUNDLEtBQUssQ0FBQyxvQkFBb0IsRUFBRUYsR0FBRyxDQUFDO0lBQ3hDLE9BQU8sSUFBSSxDQUFDLENBQUM7RUFDakI7QUFDSiIsImlnbm9yZUxpc3QiOltdfQ==